<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetEngine</name>
    </assembly>
    <members>
        <member name="T:CptS321.AdditionNode">
            <summary>
            Represents the addition binary operator.
            </summary>
        </member>
        <member name="M:CptS321.AdditionNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.AdditionNode"/> class.
            </summary>
        </member>
        <member name="M:CptS321.AdditionNode.#ctor(CptS321.Node,CptS321.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.AdditionNode"/> class.
            </summary>
            <param name="leftNode"> The left child. </param>
            <param name="rightNode"> the right child. </param>
        </member>
        <member name="P:CptS321.AdditionNode.Operator">
            <summary>
            Gets the operator.
            </summary>
        </member>
        <member name="P:CptS321.AdditionNode.Precedence">
            <summary>
            Gets the precedence.
            </summary>
        </member>
        <member name="P:CptS321.AdditionNode.Associativity">
            <summary>
            Gets the associativity.
            </summary>
        </member>
        <member name="M:CptS321.AdditionNode.Evaluate">
            <summary>
            Adds the left and right node together.
            </summary>
            <returns> The value of the left node plus the right node. </returns>
        </member>
        <member name="T:CptS321.BinaryOperatorNode">
            <summary>
            Class that represents an operator in an expression.
            </summary>
        </member>
        <member name="M:CptS321.BinaryOperatorNode.#ctor(CptS321.Node,CptS321.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.BinaryOperatorNode"/> class.
            </summary>
            <param name="leftNode"> Reference to the left node. </param>
            <param name="rightNode"> Reference to the right node. </param>
        </member>
        <member name="T:CptS321.BinaryOperatorNode.Associative">
            <summary>
            Represents the associative of a binary operator.
            </summary>
        </member>
        <member name="F:CptS321.BinaryOperatorNode.Associative.Right">
            <summary>
            The operator is Right associative.
            </summary>
        </member>
        <member name="F:CptS321.BinaryOperatorNode.Associative.Left">
            <summary>
            The operator is Left associative.
            </summary>
        </member>
        <member name="P:CptS321.BinaryOperatorNode.LeftNode">
            <summary>
            Gets or sets leftNode.
            </summary>
        </member>
        <member name="P:CptS321.BinaryOperatorNode.RightNode">
            <summary>
            Gets or sets rightNode.
            </summary>
        </member>
        <member name="T:CptS321.BinaryOperatorNodeFactory">
            <summary>
            Class that controls the creation of BinaryOperatorNodes.
            </summary>
        </member>
        <member name="M:CptS321.BinaryOperatorNodeFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.BinaryOperatorNodeFactory"/> class.
            </summary>
        </member>
        <member name="M:CptS321.BinaryOperatorNodeFactory.CreateBinaryOperatorNode(System.Char)">
            <summary>
            Given the character representation of an operator, returns the corresponding BinaryOperatorNode.
            </summary>
            <param name="op"> The character represenatation of a binary operator. </param>
            <returns> A child of the BinaryOperatorNode class. </returns>
        </member>
        <member name="T:CptS321.DivisionNode">
            <summary>
            Represents the division binary operator.
            </summary>
        </member>
        <member name="M:CptS321.DivisionNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.DivisionNode"/> class.
            </summary>
        </member>
        <member name="M:CptS321.DivisionNode.#ctor(CptS321.Node,CptS321.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.DivisionNode"/> class.
            </summary>
            <param name="leftNode"> The left child. </param>
            <param name="rightNode"> the right child. </param>
        </member>
        <member name="P:CptS321.DivisionNode.Operator">
            <summary>
            Gets the operator.
            </summary>
        </member>
        <member name="P:CptS321.DivisionNode.Precedence">
            <summary>
            Gets the precedence.
            </summary>
        </member>
        <member name="P:CptS321.DivisionNode.Associativity">
            <summary>
            Gets the associativity.
            </summary>
        </member>
        <member name="M:CptS321.DivisionNode.Evaluate">
            <summary>
            Divides the left and right node.
            </summary>
            <returns> The value of the left node divided by the right node. </returns>
        </member>
        <member name="T:CptS321.ExpressionTree">
            <summary>
            Class for evaluating expressions.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionTree.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.ExpressionTree"/> class.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionTree.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.ExpressionTree"/> class.
            </summary>
            <param name="expression"> The expression to be evaluated in string form. </param>
        </member>
        <member name="P:CptS321.ExpressionTree.Expression">
            <summary>
            Gets or Sets expression.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionTree.SetVariable(System.String,System.Double)">
            <summary>
            Sets the specified variable within the ExpresionTree variables dictionary.
            </summary>
            <param name="variableName"> The name of the variable, used as the key in the variable dictionary. </param>
            <param name="variableValue"> The value associated with the variable. </param>
        </member>
        <member name="M:CptS321.ExpressionTree.Evaluate">
            <summary>
            Evaluates the expression stored ExpressionTree.
            </summary>
            <returns> A double value that is the result of evaluating the expression. </returns>
        </member>
        <member name="M:CptS321.ExpressionTree.ParseExpression(System.String)">
            <summary>
            Accepts an expression in infix notation and returns a list of the operands (values and variables)
            and operators of the string in infix order.
            </summary>
            <param name="expression"> A string representing an expression in infix order. </param>
            <returns> A list of the operands (values and variables) and operators in infix order. </returns>
        </member>
        <member name="M:CptS321.ExpressionTree.LoadVariables(System.String)">
            <summary>
            Resets the variable dictionary and fills it out again.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionTree.ComparePrecedence(System.String,System.String)">
            <summary>
            Given two operators, returns a negative value if the first parameter is lower precedence,
            0 if the first parameter is of equal precedence, and greater than 0 if of higher precedence.
            </summary>
            <param name="s1"> The first operator. </param>
            <param name="s2"> The second operator. </param>
            <returns> An integer value representing whether the first operator is lower, equal, or higher predence. </returns>
        </member>
        <member name="M:CptS321.ExpressionTree.GetAssociativity(System.String)">
            <summary>
            Returns the associativity of an operator.
            </summary>
            <param name="s"> String representation of an operator. </param>
        </member>
        <member name="M:CptS321.ExpressionTree.InfixToPostfix(System.Collections.Generic.List{System.String})">
            <summary>
            Uses shunting yard algorithm to convert an infix expression into postfix.
            </summary>
            <param name="infix"> An expression in list format in infix notation. </param>
            <returns> A list of values, variables, and operators in postfix notation. </returns>
        </member>
        <member name="M:CptS321.ExpressionTree.Build(System.Collections.Generic.List{System.String})">
            <summary>
            Builds the parse tree based off of the current expression string.
            </summary>
        </member>
        <member name="T:CptS321.ExpressionVariable">
            <summary>
            Class that represents a variable in an expression.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionVariable.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.ExpressionVariable"/> class.
            </summary>
            <param name="name"> The name of the new variable. </param>
            <param name="value"> The value of the new variable. </param>
        </member>
        <member name="P:CptS321.ExpressionVariable.Name">
            <summary>
            Gets or Sets name.
            </summary>
        </member>
        <member name="P:CptS321.ExpressionVariable.Value">
            <summary>
            Gets or Sets value.
            </summary>
        </member>
        <member name="T:CptS321.MultiplicationNode">
            <summary>
            Represents the multiplication binary operator.
            </summary>
        </member>
        <member name="M:CptS321.MultiplicationNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.MultiplicationNode"/> class.
            </summary>
        </member>
        <member name="M:CptS321.MultiplicationNode.#ctor(CptS321.Node,CptS321.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.MultiplicationNode"/> class.
            </summary>
            <param name="leftNode"> The left child. </param>
            <param name="rightNode"> the right child. </param>
        </member>
        <member name="P:CptS321.MultiplicationNode.Operator">
            <summary>
            Gets the operator.
            </summary>
        </member>
        <member name="P:CptS321.MultiplicationNode.Precedence">
            <summary>
            Gets the precedence.
            </summary>
        </member>
        <member name="P:CptS321.MultiplicationNode.Associativity">
            <summary>
            Gets the associativity.
            </summary>
        </member>
        <member name="M:CptS321.MultiplicationNode.Evaluate">
            <summary>
            Multiplies the left and right node together.
            </summary>
            <returns> The value of the left node times the right node. </returns>
        </member>
        <member name="T:CptS321.Node">
            <summary>
            For polymorphism of future nodes.
            </summary>
        </member>
        <member name="M:CptS321.Node.Evaluate">
            <summary>
            Everynode has a value that it can return, Compute returns that value.
            </summary>
            <returns> Returns the value of the Node. </returns>
        </member>
        <member name="T:CptS321.Spreadsheet">
            <summary>
            Factory for the SpreadsheetCell class.
            </summary>
        </member>
        <member name="M:CptS321.Spreadsheet.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.Spreadsheet"/> class.
            </summary>
            <param name="numberRows"> The height of the spreadsheet. </param>
            <param name="numberColumns"> The width of the spreadsheet. </param>
        </member>
        <member name="E:CptS321.Spreadsheet.CellPropertyChanged">
            <summary>
            This event triggers when any Cell in the 2-dimensional array is modified.
            </summary>
        </member>
        <member name="P:CptS321.Spreadsheet.RowCount">
            <summary>
            Gets the height of the spreadsheet.
            </summary>
        </member>
        <member name="P:CptS321.Spreadsheet.ColumnCount">
            <summary>
            Gets the width of the spreadsheet.
            </summary>
        </member>
        <member name="M:CptS321.Spreadsheet.GetCell(System.Int32,System.Int32)">
            <summary>
            Accesses a cell.
            </summary>
            <param name="rowIndex"> The row of the cell one wants to access. </param>
            <param name="columnIndex"> The column of the cell one wants to access. </param>
            <returns> Returns the cell at location (rowIndex, columnIndex) or null if such a cell does not exist. </returns>
        </member>
        <member name="M:CptS321.Spreadsheet.UpdateSpreadsheet(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Triggers CellPropertyChanged and is called whenever a single cell in spreadSheet has its text field changed.
            </summary>
            <param name="sender"> The cell that was changed. </param>
            <param name="e"> The name of the property that was used for the change. </param>
        </member>
        <member name="T:CptS321.Spreadsheet.Cell">
            <summary>
            Acts the same as a SpreadsheetCell, but can be initiated only inside of Spreadsheet.
            </summary>
        </member>
        <member name="M:CptS321.Spreadsheet.Cell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.Spreadsheet.Cell"/> class.
            Provides access to the constructor of SpreadsheetCell.
            </summary>
            <param name="rowIndex"> The current row number of this cell. </param>
            <param name="columnIndex"> The current column number of this cell. </param>
        </member>
        <member name="P:CptS321.Spreadsheet.Cell.Value">
            <summary>
            Gets or Sets the value of a cell.
            </summary>
        </member>
        <member name="T:CptS321.SpreadsheetCell">
            <summary>
            Class that provides the functionality of a single cell in the spreadsheet.
            </summary>
        </member>
        <member name="F:CptS321.SpreadsheetCell.text">
            <summary>
            The string of the cell that can be seen in the GUI.
            </summary>
        </member>
        <member name="F:CptS321.SpreadsheetCell.value">
            <summary>
            The calculated value of the cell in the GUI.
            </summary>
        </member>
        <member name="M:CptS321.SpreadsheetCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.SpreadsheetCell"/> class.
            </summary>
        </member>
        <member name="M:CptS321.SpreadsheetCell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.SpreadsheetCell"/> class.
            Constructor that allows creation of a SpreadsheetCell with a given rowIndex and columnIndex.
            </summary>
            <param name="rowIndex"> Initialize field rowIndex with parameter rowIndex. </param>
            <param name="columnIndex"> Initialize field columnIndex with paremeter columnIndex. </param>
        </member>
        <member name="E:CptS321.SpreadsheetCell.PropertyChanged">
            <summary>
            Triggers when any of the properties are changed, argument sent is the name of the property.
            </summary>
        </member>
        <member name="P:CptS321.SpreadsheetCell.RowIndex">
            <summary>
            Gets the SpreadsheetCell's rowIndex.
            </summary>
        </member>
        <member name="P:CptS321.SpreadsheetCell.ColumnIndex">
            <summary>
            Gets the SpreadsheetCell's columnIndex.
            </summary>
        </member>
        <member name="P:CptS321.SpreadsheetCell.Text">
            <summary>
            Gets or Sets the SpreadsheetCell's text.
            </summary>
        </member>
        <member name="P:CptS321.SpreadsheetCell.Value">
            <summary>
            Gets or sets the SpreadsheetCell's value.
            </summary>
        </member>
        <member name="T:CptS321.SubtractionNode">
            <summary>
            Represents the subtraction binary operator.
            </summary>
        </member>
        <member name="M:CptS321.SubtractionNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.SubtractionNode"/> class.
            </summary>
        </member>
        <member name="M:CptS321.SubtractionNode.#ctor(CptS321.Node,CptS321.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.SubtractionNode"/> class.
            </summary>
            <param name="leftNode"> The left child. </param>
            <param name="rightNode"> the right child. </param>
        </member>
        <member name="P:CptS321.SubtractionNode.Operator">
            <summary>
            Gets the operator.
            </summary>
        </member>
        <member name="P:CptS321.SubtractionNode.Precedence">
            <summary>
            Gets the precedence.
            </summary>
        </member>
        <member name="P:CptS321.SubtractionNode.Associativity">
            <summary>
            Gets the associativity.
            </summary>
        </member>
        <member name="M:CptS321.SubtractionNode.Evaluate">
            <summary>
            Subtracts the right node from the left..
            </summary>
            <returns> The value of the right node minus the left node. </returns>
        </member>
        <member name="T:CptS321.ValueNode">
            <summary>
            Leaf node that represents a constant numerical value.
            </summary>
        </member>
        <member name="M:CptS321.ValueNode.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.ValueNode"/> class.
            </summary>
            <param name="value"> The value that the leaf will store. </param>
        </member>
        <member name="P:CptS321.ValueNode.Value">
            <summary>
            Gets the value of the node.
            </summary>
        </member>
        <member name="M:CptS321.ValueNode.Evaluate">
            <summary>
            The result of this node.
            </summary>
            <returns> The value. </returns>
        </member>
        <member name="T:CptS321.VariableNode">
            <summary>
            Leaf node that represents a variable in an expression.
            </summary>
        </member>
        <member name="M:CptS321.VariableNode.#ctor(CptS321.ExpressionVariable)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.VariableNode"/> class.
            </summary>
            <param name="variable"> Reference to the variable that this node will store. </param>
        </member>
        <member name="P:CptS321.VariableNode.Variable">
            <summary>
            Gets the variable of this node.
            </summary>
        </member>
        <member name="M:CptS321.VariableNode.Evaluate">
            <summary>
            The result of this node.
            </summary>
            <returns> The value field of variable. </returns>
        </member>
    </members>
</doc>
