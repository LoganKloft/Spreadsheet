<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetEngine</name>
    </assembly>
    <members>
        <member name="T:CptS321.AdditionNode">
            <summary>
            Represents the addition binary operator.
            </summary>
        </member>
        <member name="M:CptS321.AdditionNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.AdditionNode"/> class.
            </summary>
        </member>
        <member name="M:CptS321.AdditionNode.#ctor(CptS321.Node,CptS321.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.AdditionNode"/> class.
            </summary>
            <param name="leftNode"> The left child. </param>
            <param name="rightNode"> the right child. </param>
        </member>
        <member name="P:CptS321.AdditionNode.Operator">
            <summary>
            Gets the operator.
            </summary>
        </member>
        <member name="P:CptS321.AdditionNode.Precedence">
            <summary>
            Gets the precedence.
            </summary>
        </member>
        <member name="P:CptS321.AdditionNode.Associativity">
            <summary>
            Gets the associativity.
            </summary>
        </member>
        <member name="M:CptS321.AdditionNode.Evaluate">
            <summary>
            Adds the left and right node together.
            </summary>
            <returns> The value of the left node plus the right node. </returns>
        </member>
        <member name="T:CptS321.BinaryOperatorNode">
            <summary>
            Class that represents an operator in an expression.
            </summary>
        </member>
        <member name="M:CptS321.BinaryOperatorNode.#ctor(CptS321.Node,CptS321.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.BinaryOperatorNode"/> class.
            </summary>
            <param name="leftNode"> Reference to the left node. </param>
            <param name="rightNode"> Reference to the right node. </param>
        </member>
        <member name="T:CptS321.BinaryOperatorNode.Associative">
            <summary>
            Represents the associative of a binary operator.
            </summary>
        </member>
        <member name="F:CptS321.BinaryOperatorNode.Associative.Right">
            <summary>
            The operator is Right associative.
            </summary>
        </member>
        <member name="F:CptS321.BinaryOperatorNode.Associative.Left">
            <summary>
            The operator is Left associative.
            </summary>
        </member>
        <member name="P:CptS321.BinaryOperatorNode.LeftNode">
            <summary>
            Gets or sets leftNode.
            </summary>
        </member>
        <member name="P:CptS321.BinaryOperatorNode.RightNode">
            <summary>
            Gets or sets rightNode.
            </summary>
        </member>
        <member name="T:CptS321.BinaryOperatorNodeFactory">
            <summary>
            Class that controls the creation of BinaryOperatorNodes.
            </summary>
        </member>
        <member name="M:CptS321.BinaryOperatorNodeFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.BinaryOperatorNodeFactory"/> class.
            </summary>
        </member>
        <member name="M:CptS321.BinaryOperatorNodeFactory.CreateBinaryOperatorNode(System.String)">
            <summary>
            Given the character representation of an operator, returns the corresponding BinaryOperatorNode.
            </summary>
            <param name="op"> The character represenatation of a binary operator. </param>
            <returns> A child of the BinaryOperatorNode class. </returns>
        </member>
        <member name="M:CptS321.BinaryOperatorNodeFactory.ComparePrecedence(System.String,System.String)">
            <summary>
            Given two operators, returns a negative value if the first parameter is lower precedence,
            0 if the first parameter is of equal precedence, and greater than 0 if of higher precedence.
            </summary>
            <param name="op1"> The first operator. </param>
            <param name="op2"> The second operator. </param>
            <returns> An integer value representing whether the first operator is lower, equal, or higher predence. </returns>
        </member>
        <member name="M:CptS321.BinaryOperatorNodeFactory.GetAssociativity(System.String)">
            <summary>
            Returns the associativity of an operator.
            </summary>
            <param name="op"> String representation of an operator. </param>
            <returns> The associativity of the given operator. </returns>
        </member>
        <member name="T:CptS321.CommandCollection">
            <summary>
            Stores a collection of commands and a message describing their action.
            </summary>
        </member>
        <member name="M:CptS321.CommandCollection.#ctor(System.Collections.Generic.List{CptS321.ICommand},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.CommandCollection"/> class.
            </summary>
            <param name="commandList"> List of commands. </param>
            <param name="message"> Message describing overall action of the list of commands. </param>
        </member>
        <member name="P:CptS321.CommandCollection.CommandList">
            <summary>
            Gets the commandList.
            </summary>
        </member>
        <member name="P:CptS321.CommandCollection.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:CptS321.CommandInvoker">
            <summary>
            Responsible for redoing and undoing commands.
            </summary>
        </member>
        <member name="E:CptS321.CommandInvoker.UndoRedoStackChanged">
            <summary>
            Event that gets raised when either redoStack or undoStack or changed.
            </summary>
        </member>
        <member name="M:CptS321.CommandInvoker.AddUndo(System.Collections.Generic.List{CptS321.ICommand},System.String)">
            <summary>
            Adds a list of commands that can be undone by calling CommandInvoker.Undo().
            </summary>
            <param name="commandList"> A list of one or more commands to be executed or unexecuted. </param>
            <param name="message"> The message describing the overal action of the list of commands. </param>
        </member>
        <member name="M:CptS321.CommandInvoker.AddUndo(CptS321.CommandCollection)">
            <summary>
            Adds a commandCollection to the undoStack.
            </summary>
            <param name="commandCollection"> A collection of a list of commands and a message describing the action of the commands. </param>
        </member>
        <member name="M:CptS321.CommandInvoker.Undo">
            <summary>
            Pops the commandList at the top of the undo stack.
            Unexecutes the popped commandList and pushes it to the redoStack.
            </summary>
        </member>
        <member name="M:CptS321.CommandInvoker.CanUndo">
            <summary>
            Returns true if undoStack is not empty, false otherwise.
            </summary>
            <returns> A boolean value that means whether there are any commands left to undo. </returns>
        </member>
        <member name="M:CptS321.CommandInvoker.UndoText">
            <summary>
            Returns the message of the top Command on the undo stack, otherwise returns "Undo".
            </summary>
            <returns> The message of the top undo command. </returns>
        </member>
        <member name="M:CptS321.CommandInvoker.CanRedo">
            <summary>
            Returns true if redoStack is not empty, false otherwise.
            </summary>
            <returns> A boolean value that means whether there are any commands left to redo. </returns>
        </member>
        <member name="M:CptS321.CommandInvoker.Redo">
            <summary>
            Pops the command at the top of the redo stack.
            Executes the popped comman and pushes it to the undoStack.
            </summary>
        </member>
        <member name="M:CptS321.CommandInvoker.RedoText">
            <summary>
            Returns the message of the top Command on the redo stack, otherwise returns "Redo".
            </summary>
            <returns> The message of the top redo command. </returns>
        </member>
        <member name="M:CptS321.CommandInvoker.ClearUndoStack">
            <summary>
            Empty the undo Stack. Called in the Load event handler.
            </summary>
        </member>
        <member name="M:CptS321.CommandInvoker.ClearRedoStack">
            <summary>
            Empty the redo stack. Called in the Load event handler.
            </summary>
        </member>
        <member name="T:CptS321.DivisionNode">
            <summary>
            Represents the division binary operator.
            </summary>
        </member>
        <member name="M:CptS321.DivisionNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.DivisionNode"/> class.
            </summary>
        </member>
        <member name="M:CptS321.DivisionNode.#ctor(CptS321.Node,CptS321.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.DivisionNode"/> class.
            </summary>
            <param name="leftNode"> The left child. </param>
            <param name="rightNode"> the right child. </param>
        </member>
        <member name="P:CptS321.DivisionNode.Operator">
            <summary>
            Gets the operator.
            </summary>
        </member>
        <member name="P:CptS321.DivisionNode.Precedence">
            <summary>
            Gets the precedence.
            </summary>
        </member>
        <member name="P:CptS321.DivisionNode.Associativity">
            <summary>
            Gets the associativity.
            </summary>
        </member>
        <member name="M:CptS321.DivisionNode.Evaluate">
            <summary>
            Divides the left and right node.
            </summary>
            <returns> The value of the left node divided by the right node. </returns>
        </member>
        <member name="T:CptS321.ExpressionTree">
            <summary>
            Class for evaluating expressions.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionTree.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.ExpressionTree"/> class.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionTree.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.ExpressionTree"/> class.
            </summary>
            <param name="expression"> The expression to be evaluated in string form. </param>
        </member>
        <member name="P:CptS321.ExpressionTree.Expression">
            <summary>
            Gets or Sets expression.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionTree.SetVariable(System.String,System.Double)">
            <summary>
            Sets the specified variable within the ExpresionTree variables dictionary.
            </summary>
            <param name="variableName"> The name of the variable, used as the key in the variable dictionary. </param>
            <param name="variableValue"> The value associated with the variable. </param>
        </member>
        <member name="M:CptS321.ExpressionTree.GetVariableNames">
            <summary>
            Gets a list of the currently stored variable names which are the keys in the variables dictionary.
            </summary>
            <returns> List of variable names stored in this expression tree. </returns>
        </member>
        <member name="M:CptS321.ExpressionTree.Evaluate">
            <summary>
            Evaluates the expression stored ExpressionTree.
            </summary>
            <returns> A double value that is the result of evaluating the expression. </returns>
        </member>
        <member name="M:CptS321.ExpressionTree.ParseExpression(System.String)">
            <summary>
            Accepts an expression in infix notation and returns a list of the operands (values and variables)
            and operators of the string in infix order.
            </summary>
            <param name="expression"> A string representing an expression in infix order. </param>
            <returns> A list of the operands (values and variables) and operators in infix order. </returns>
        </member>
        <member name="M:CptS321.ExpressionTree.LoadVariables(System.String)">
            <summary>
            Resets the variable dictionary and fills it out again.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionTree.InfixToPostfix(System.Collections.Generic.List{System.String})">
            <summary>
            Uses shunting yard algorithm to convert an infix expression into postfix.
            </summary>
            <param name="infix"> An expression in list format in infix notation. </param>
            <returns> A list of values, variables, and operators in postfix notation. </returns>
        </member>
        <member name="M:CptS321.ExpressionTree.Build(System.Collections.Generic.List{System.String})">
            <summary>
            Builds the parse tree based off of the current expression string.
            </summary>
        </member>
        <member name="T:CptS321.ExpressionVariable">
            <summary>
            Class that represents a variable in an expression.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionVariable.#ctor(System.String,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.ExpressionVariable"/> class.
            </summary>
            <param name="name"> The name of the new variable. </param>
            <param name="value"> The value of the new variable. </param>
        </member>
        <member name="P:CptS321.ExpressionVariable.Name">
            <summary>
            Gets or Sets name.
            </summary>
        </member>
        <member name="P:CptS321.ExpressionVariable.Value">
            <summary>
            Gets or Sets value.
            </summary>
        </member>
        <member name="T:CptS321.Globals">
            <summary>
            Defines global varaibles for the spreadsheet application.
            </summary>
        </member>
        <member name="T:CptS321.Globals.SpreadsheetCell">
            <summary>
            Contains the global variables for the SpreadsheetCell class.
            </summary>
        </member>
        <member name="P:CptS321.Globals.SpreadsheetCell.Default_BGColor">
            <summary>
            Gets the default value for the BGColor property of the SpreadsheetCell class.
            </summary>
        </member>
        <member name="P:CptS321.Globals.SpreadsheetCell.Default_Text">
            <summary>
            Gets the default value for the Text property of teh SpreadsheetCell class.
            </summary>
        </member>
        <member name="T:CptS321.ICommand">
            <summary>
            Defines the basic behavior of any command in the Command Design Pattern.
            </summary>
        </member>
        <member name="M:CptS321.ICommand.Execute">
            <summary>
            The logic of the action of the command.
            </summary>
        </member>
        <member name="M:CptS321.ICommand.Unexecute">
            <summary>
            The logic for undoing the action of the command.
            </summary>
        </member>
        <member name="M:CptS321.ICommand.Message">
            <summary>
            Used to send a message to accompany the command.
            </summary>
            <returns> The message describing in low detail what the command does. </returns>
        </member>
        <member name="T:CptS321.MultiplicationNode">
            <summary>
            Represents the multiplication binary operator.
            </summary>
        </member>
        <member name="M:CptS321.MultiplicationNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.MultiplicationNode"/> class.
            </summary>
        </member>
        <member name="M:CptS321.MultiplicationNode.#ctor(CptS321.Node,CptS321.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.MultiplicationNode"/> class.
            </summary>
            <param name="leftNode"> The left child. </param>
            <param name="rightNode"> the right child. </param>
        </member>
        <member name="P:CptS321.MultiplicationNode.Operator">
            <summary>
            Gets the operator.
            </summary>
        </member>
        <member name="P:CptS321.MultiplicationNode.Precedence">
            <summary>
            Gets the precedence.
            </summary>
        </member>
        <member name="P:CptS321.MultiplicationNode.Associativity">
            <summary>
            Gets the associativity.
            </summary>
        </member>
        <member name="M:CptS321.MultiplicationNode.Evaluate">
            <summary>
            Multiplies the left and right node together.
            </summary>
            <returns> The value of the left node times the right node. </returns>
        </member>
        <member name="T:CptS321.NoCommand">
            <summary>
            The NoCommand is used as a plcae holder for a command that does nothing.
            </summary>
        </member>
        <member name="M:CptS321.NoCommand.Execute">
            <summary>
            Represents a command that does nothing. Used as a place holder instead of null.
            </summary>
        </member>
        <member name="M:CptS321.NoCommand.Unexecute">
            <summary>
            Represents a command that does nothing. Used as a place holder instead of null.
            </summary>
        </member>
        <member name="M:CptS321.NoCommand.Message">
            <summary>
            Used to send a message to accompany the command.
            </summary>
            <returns> The message describing in low detail what the command does. </returns>
        </member>
        <member name="T:CptS321.Node">
            <summary>
            For polymorphism of future nodes.
            </summary>
        </member>
        <member name="M:CptS321.Node.Evaluate">
            <summary>
            Everynode has a value that it can return, Compute returns that value.
            </summary>
            <returns> Returns the value of the Node. </returns>
        </member>
        <member name="T:CptS321.Spreadsheet">
            <summary>
            Factory for the SpreadsheetCell class.
            </summary>
        </member>
        <member name="M:CptS321.Spreadsheet.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.Spreadsheet"/> class.
            </summary>
            <param name="numberRows"> The height of the spreadsheet. </param>
            <param name="numberColumns"> The width of the spreadsheet. </param>
        </member>
        <member name="E:CptS321.Spreadsheet.CellPropertyChanged">
            <summary>
            This event triggers when any Cell in the 2-dimensional array is modified.
            </summary>
        </member>
        <member name="P:CptS321.Spreadsheet.RowCount">
            <summary>
            Gets the height of the spreadsheet.
            </summary>
        </member>
        <member name="P:CptS321.Spreadsheet.ColumnCount">
            <summary>
            Gets the width of the spreadsheet.
            </summary>
        </member>
        <member name="M:CptS321.Spreadsheet.ParseVariableName(System.String)">
            <summary>
            Splits a variable that consists of firstly a letter, followed by any number of numbers into a 2-d array.
            </summary>
            <param name="variableName"> A cell location. </param>
            <returns> The {row, col} in 1-based indexing. </returns>
        </member>
        <member name="M:CptS321.Spreadsheet.ResetToDefault">
            <summary>
            Resets every cell in the spreadsheet to their default values.
            </summary>
        </member>
        <member name="M:CptS321.Spreadsheet.GetCell(System.Int32,System.Int32)">
            <summary>
            Accesses a cell.
            </summary>
            <param name="rowIndex"> The row of the cell one wants to access. </param>
            <param name="columnIndex"> The column of the cell one wants to access. </param>
            <returns> Returns the cell at location (rowIndex, columnIndex) or null if such a cell does not exist. </returns>
        </member>
        <member name="M:CptS321.Spreadsheet.UpdateSpreadsheet(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Triggers CellPropertyChanged and is called whenever a single cell in spreadSheet has its text field changed.
            </summary>
            <param name="sender"> The cell that was changed. </param>
            <param name="e"> The name of the property that was used for the change. </param>
        </member>
        <member name="M:CptS321.Spreadsheet.CellPropertyChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
             Called when the value of a Cell has been changed. Should update all cells that reference this cell.
            </summary>
            <param name="sender"> The cell whose value changed. </param>
            <param name="e"> The name of the property that has changed. </param>
        </member>
        <member name="M:CptS321.Spreadsheet.RecalculateCellsWhoReference(System.String)">
            <summary>
            Given a cell name, will search all cells who depend on this cell and recalculate their values using an expression tree.
            </summary>
            <param name="cellName"> The name of the cell name who other cells reference in there Text property. </param>
        </member>
        <member name="M:CptS321.Spreadsheet.RecalculateCellExpression(CptS321.SpreadsheetCell)">
            <summary>
            Performs the same function as UpdateSpreadsheet but on a cell with an expression
            and can be explicitly called.
            </summary>
            <param name="spreadsheetCell"> A spreadsheet cell whose text property must start with '='. </param>
        </member>
        <member name="M:CptS321.Spreadsheet.IsValidCellName(System.String)">
            <summary>
            Given a cellName returns whether the cellName is valid or not.
            </summary>
            <param name="cellName"> Name of a cell. </param>
            <returns> True if the cellName is valid, false otherwise. </returns>
        </member>
        <member name="M:CptS321.Spreadsheet.HasValidExpressionVariables(CptS321.SpreadsheetCell)">
            <summary>
            Decides whether a cell, if it contains variables has only variables which are references to other cells.
            </summary>
            <param name="cell"> The cell to evaluate. </param>
            <returns> True if cell is  and has not an expressoin or has variables which are cell references. </returns>
        </member>
        <member name="M:CptS321.Spreadsheet.HasSelfReference(CptS321.SpreadsheetCell)">
            <summary>
            Returns whether the cell, if an expression has a self reference.
            </summary>
            <param name="cell"> The cell to be evaluated. </param>
            <returns> Returns true if cell contains an expression that contains a self reference, false otherwise. </returns>
        </member>
        <member name="T:CptS321.Spreadsheet.Cell">
            <summary>
            Acts the same as a SpreadsheetCell, but can be initiated only inside of Spreadsheet.
            </summary>
        </member>
        <member name="M:CptS321.Spreadsheet.Cell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.Spreadsheet.Cell"/> class.
            Provides access to the constructor of SpreadsheetCell.
            </summary>
            <param name="rowIndex"> The current row number of this cell. </param>
            <param name="columnIndex"> The current column number of this cell. </param>
        </member>
        <member name="P:CptS321.Spreadsheet.Cell.Value">
            <summary>
            Gets or Sets the value of a cell.
            </summary>
        </member>
        <member name="T:CptS321.SpreadsheetCell">
            <summary>
            Class that provides the functionality of a single cell in the spreadsheet.
            </summary>
        </member>
        <member name="F:CptS321.SpreadsheetCell.text">
            <summary>
            The string of the cell that can be seen in the GUI.
            </summary>
        </member>
        <member name="F:CptS321.SpreadsheetCell.value">
            <summary>
            The calculated value of the cell in the GUI.
            </summary>
        </member>
        <member name="M:CptS321.SpreadsheetCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.SpreadsheetCell"/> class.
            </summary>
        </member>
        <member name="M:CptS321.SpreadsheetCell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.SpreadsheetCell"/> class.
            Constructor that allows creation of a SpreadsheetCell with a given rowIndex and columnIndex.
            </summary>
            <param name="rowIndex"> Initialize field rowIndex with parameter rowIndex. </param>
            <param name="columnIndex"> Initialize field columnIndex with paremeter columnIndex. </param>
        </member>
        <member name="E:CptS321.SpreadsheetCell.PropertyChanged">
            <summary>
            Triggers when any of the properties are changed, argument sent is the name of the property.
            </summary>
        </member>
        <member name="P:CptS321.SpreadsheetCell.RowIndex">
            <summary>
            Gets the SpreadsheetCell's rowIndex.
            </summary>
        </member>
        <member name="P:CptS321.SpreadsheetCell.ColumnIndex">
            <summary>
            Gets the SpreadsheetCell's columnIndex.
            </summary>
        </member>
        <member name="P:CptS321.SpreadsheetCell.Text">
            <summary>
            Gets or Sets the SpreadsheetCell's text.
            </summary>
        </member>
        <member name="P:CptS321.SpreadsheetCell.Value">
            <summary>
            Gets or sets the SpreadsheetCell's value.
            </summary>
        </member>
        <member name="P:CptS321.SpreadsheetCell.BGColor">
            <summary>
            Gets or sets the bgColor.
            </summary>
        </member>
        <member name="M:CptS321.SpreadsheetCell.ResetCell">
            <summary>
            Resets the Text and BGColor property of the cell to their respective global values.
            </summary>
        </member>
        <member name="M:CptS321.SpreadsheetCell.ToString">
            <summary>
            Represents the string format of a SpreadsheetCell object.
            </summary>
            <returns> Returns the ColumnIndex in character form concatenated to the RowIndex.
            i.e a SpreadsheetCell with ColumnIndex 1 and RowIndex 1 will return "A1". </returns>
        </member>
        <member name="T:CptS321.SpreadsheetCellBGColorCommand">
            <summary>
            Command for changing the BGColor of a cell.
            </summary>
        </member>
        <member name="M:CptS321.SpreadsheetCellBGColorCommand.#ctor(CptS321.SpreadsheetCell,System.UInt32,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.SpreadsheetCellBGColorCommand"/> class.
            </summary>
            <param name="spreadsheetCell"> The cell the command will act on. </param>
            <param name="bgcolorBeforeCommand"> The BGColor before running the command. </param>
            <param name="bgcolorAfterCommand"> The BGColor after running the command. </param>
            <param name="message"> Message describing what is being updated in the cell. </param>
        </member>
        <member name="M:CptS321.SpreadsheetCellBGColorCommand.Message">
            <summary>
            Used to send a message to accompany the command.
            </summary>
            <returns> The message describing in low detail what the command does. </returns>
        </member>
        <member name="M:CptS321.SpreadsheetCellBGColorCommand.Execute">
            <summary>
            Updates spreadsheetCell's BGColor to bgcolorAfterCommand.
            </summary>
        </member>
        <member name="M:CptS321.SpreadsheetCellBGColorCommand.Unexecute">
            <summary>
            Updates spreadsheetCell's BGColor to bgcolorBeforeCommand.
            </summary>
        </member>
        <member name="T:CptS321.SpreadsheetCellTextCommand">
            <summary>
            Command for changing the Text of a cell.
            </summary>
        </member>
        <member name="M:CptS321.SpreadsheetCellTextCommand.#ctor(CptS321.SpreadsheetCell,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.SpreadsheetCellTextCommand"/> class.
            </summary>
            <param name="spreadsheetCell"> The cell the command will act on. </param>
            <param name="textBeforeCommand"> The text of the cell before running the command. </param>
            <param name="textAfterCommand"> The text of the cell after running the command. </param>
            <param name="message"> Message describing what is being updated in the cell. </param>
        </member>
        <member name="M:CptS321.SpreadsheetCellTextCommand.Message">
            <summary>
            Used to send a message to accompany the command.
            </summary>
            <returns> The message describing in low detail what the command does. </returns>
        </member>
        <member name="M:CptS321.SpreadsheetCellTextCommand.Execute">
            <summary>
            Updates spreadsheetCell's text to textAfterCommand.
            </summary>
        </member>
        <member name="M:CptS321.SpreadsheetCellTextCommand.Unexecute">
            <summary>
            Updates spreadsheetCell's text to textBeforeCommand.
            </summary>
        </member>
        <member name="T:CptS321.SubtractionNode">
            <summary>
            Represents the subtraction binary operator.
            </summary>
        </member>
        <member name="M:CptS321.SubtractionNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.SubtractionNode"/> class.
            </summary>
        </member>
        <member name="M:CptS321.SubtractionNode.#ctor(CptS321.Node,CptS321.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.SubtractionNode"/> class.
            </summary>
            <param name="leftNode"> The left child. </param>
            <param name="rightNode"> the right child. </param>
        </member>
        <member name="P:CptS321.SubtractionNode.Operator">
            <summary>
            Gets the operator.
            </summary>
        </member>
        <member name="P:CptS321.SubtractionNode.Precedence">
            <summary>
            Gets the precedence.
            </summary>
        </member>
        <member name="P:CptS321.SubtractionNode.Associativity">
            <summary>
            Gets the associativity.
            </summary>
        </member>
        <member name="M:CptS321.SubtractionNode.Evaluate">
            <summary>
            Subtracts the right node from the left..
            </summary>
            <returns> The value of the right node minus the left node. </returns>
        </member>
        <member name="T:CptS321.UnsupportedOperatorException">
            <summary>
            Use this when trying to access a property or initialize an operator that does not exist.
            </summary>
        </member>
        <member name="M:CptS321.UnsupportedOperatorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.UnsupportedOperatorException"/> class.
            </summary>
        </member>
        <member name="M:CptS321.UnsupportedOperatorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.UnsupportedOperatorException"/> class.
            </summary>
            <param name="message"> The error message that should be displayed in the console. </param>
        </member>
        <member name="M:CptS321.UnsupportedOperatorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.UnsupportedOperatorException"/> class.
            </summary>
            <param name="message"> The error message that should be displayed in the console. </param>
            <param name="inner"> The less specific related error message. </param>
        </member>
        <member name="T:CptS321.ValueNode">
            <summary>
            Leaf node that represents a constant numerical value.
            </summary>
        </member>
        <member name="M:CptS321.ValueNode.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.ValueNode"/> class.
            </summary>
            <param name="value"> The value that the leaf will store. </param>
        </member>
        <member name="P:CptS321.ValueNode.Value">
            <summary>
            Gets the value of the node.
            </summary>
        </member>
        <member name="M:CptS321.ValueNode.Evaluate">
            <summary>
            The result of this node.
            </summary>
            <returns> The value. </returns>
        </member>
        <member name="T:CptS321.VariableNode">
            <summary>
            Leaf node that represents a variable in an expression.
            </summary>
        </member>
        <member name="M:CptS321.VariableNode.#ctor(CptS321.ExpressionVariable)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.VariableNode"/> class.
            </summary>
            <param name="variable"> Reference to the variable that this node will store. </param>
        </member>
        <member name="P:CptS321.VariableNode.Variable">
            <summary>
            Gets the variable of this node.
            </summary>
        </member>
        <member name="M:CptS321.VariableNode.Evaluate">
            <summary>
            The result of this node.
            </summary>
            <returns> The value field of variable. </returns>
        </member>
        <member name="T:CptS321.Workbook">
            <summary>
            Class for loading and saving spreadsheets.
            </summary>
        </member>
        <member name="M:CptS321.Workbook.Load(System.IO.Stream,CptS321.Spreadsheet)">
            <summary>
            Loads a spreadsheet from a xml file.
            </summary>
            <param name="stream"> The input xml file. </param>
            <param name="spreadsheet"> The spreadsheet one wants to load to. </param>
            <returns> True if successful in loading the file, false otherwise. </returns>
        </member>
        <member name="M:CptS321.Workbook.Save(System.IO.Stream,CptS321.Spreadsheet)">
            <summary>
            Saves a spreadsheet to an xml file.
            </summary>
            <param name="stream"> The output xml file. </param>
            <param name="spreadsheet"> The spreadsheet to be stored. </param>
            <returns> True if successful in saving, false otherwise. </returns>
        </member>
    </members>
</doc>
