<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetEngine</name>
    </assembly>
    <members>
        <member name="T:CptS321.AdditionBinaryOperator">
            <summary>
            Represents a + operator.
            </summary>
        </member>
        <member name="M:CptS321.AdditionBinaryOperator.Compute(System.Double,System.Double)">
            <summary>
            Represents + operator.
            </summary>
            <param name="arg1"> The first argument. </param>
            <param name="arg2"> The second argument. </param>
            <returns> The sum of arg1 and arg2. </returns>
        </member>
        <member name="T:CptS321.BinaryOperator">
            <summary>
            Class for creating BinaryOperators.
            </summary>
        </member>
        <member name="M:CptS321.BinaryOperator.Compute(System.Double,System.Double)">
            <summary>
            A generic class for creating new operators.
            </summary>
            <param name="arg1"> The first argument to the operator. </param>
            <param name="arg2"> The second argument to the operator. </param>
            <returns> Returns the result of the operator on arg1 and arg2. </returns>
        </member>
        <member name="T:CptS321.BinaryOperatorNode">
            <summary>
            Class that represents an operator in an expression.
            </summary>
        </member>
        <member name="M:CptS321.BinaryOperatorNode.#ctor(CptS321.BinaryOperator,CptS321.Node,CptS321.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.BinaryOperatorNode"/> class.
            </summary>
            <param name="op"> The operator of the BinaryOperatorNode. </param>
            <param name="leftNode"> Reference to the left node. </param>
            <param name="rightNode"> Reference to the right node. </param>
        </member>
        <member name="P:CptS321.BinaryOperatorNode.LeftNode">
            <summary>
            Gets or sets leftNode.
            </summary>
        </member>
        <member name="P:CptS321.BinaryOperatorNode.RightNode">
            <summary>
            Gets or sets rightNode.
            </summary>
        </member>
        <member name="P:CptS321.BinaryOperatorNode.Op">
            <summary>
            Gets op.
            </summary>
        </member>
        <member name="M:CptS321.BinaryOperatorNode.Evaluate">
            <summary>
            The result of this node.
            </summary>
            <returns> The value. </returns>
        </member>
        <member name="T:CptS321.DivisionBinaryOperator">
            <summary>
            Represents a / operator.
            </summary>
        </member>
        <member name="M:CptS321.DivisionBinaryOperator.Compute(System.Double,System.Double)">
            <summary>
            Represents / operator.
            </summary>
            <param name="arg1"> The first argument. </param>
            <param name="arg2"> The second argument. </param>
            <returns> The division of arg1 by arg2. </returns>
            <exception> Divide by zero. </exception>
        </member>
        <member name="T:CptS321.ExpressionTree">
            <summary>
            Class for evaluating expressions.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionTree.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.ExpressionTree"/> class.
            </summary>
            <param name="expression"> The expression to be evaluated in string form. </param>
        </member>
        <member name="P:CptS321.ExpressionTree.Expression">
            <summary>
            Gets or Sets expression.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionTree.SetVariable(System.String,System.Double)">
            <summary>
            Sets the specified variable within the ExpresionTree variables dictionary.
            </summary>
            <param name="variableName"> The name of the variable, used as the key in the variable dictionary. </param>
            <param name="variableValue"> The value associated with the variable. </param>
        </member>
        <member name="M:CptS321.ExpressionTree.Evaluate">
            <summary>
            Evaluates the expression stored ExpressionTree.
            </summary>
            <returns> A double value that is the result of evaluating the expression. </returns>
        </member>
        <member name="M:CptS321.ExpressionTree.ParseExpression(System.String)">
            <summary>
            Extracts the operands and operators from the input string.
            </summary>
            <param name="expression"> A string represening an expression. </param>
            <returns> A list of the operands and operators contained in expression an expression. </returns>
        </member>
        <member name="M:CptS321.ExpressionTree.LoadVariables">
            <summary>
            Resets the variable dictionary and fills it out again.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionTree.Build">
            <summary>
            Builds the parse tree based off of the current expression string.
            </summary>
        </member>
        <member name="T:CptS321.ExpressionVariable">
            <summary>
            Class that represents a variable in an expression.
            </summary>
        </member>
        <member name="M:CptS321.ExpressionVariable.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.ExpressionVariable"/> class.
            </summary>
            <param name="name"> The name of the new variable. </param>
            <param name="value"> The value of the new variable. </param>
        </member>
        <member name="P:CptS321.ExpressionVariable.Name">
            <summary>
            Gets or Sets name.
            </summary>
        </member>
        <member name="P:CptS321.ExpressionVariable.Value">
            <summary>
            Gets or Sets value.
            </summary>
        </member>
        <member name="T:CptS321.MultiplicationBinaryOperator">
            <summary>
            Represents a * operator.
            </summary>
        </member>
        <member name="M:CptS321.MultiplicationBinaryOperator.Compute(System.Double,System.Double)">
            <summary>
            Represents * operator.
            </summary>
            <param name="arg1"> The first argument. </param>
            <param name="arg2"> The second argument. </param>
            <returns> The multiplication of arg1 by arg2. </returns>
        </member>
        <member name="T:CptS321.Node">
            <summary>
            For polymorphism of future nodes.
            </summary>
        </member>
        <member name="M:CptS321.Node.Evaluate">
            <summary>
            Everynode has a value that it can return, Compute returns that value.
            </summary>
            <returns> Returns the value of the Node. </returns>
        </member>
        <member name="T:CptS321.Spreadsheet">
            <summary>
            Factory for the SpreadsheetCell class.
            </summary>
        </member>
        <member name="M:CptS321.Spreadsheet.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.Spreadsheet"/> class.
            </summary>
            <param name="numberRows"> The height of the spreadsheet. </param>
            <param name="numberColumns"> The width of the spreadsheet. </param>
        </member>
        <member name="E:CptS321.Spreadsheet.CellPropertyChanged">
            <summary>
            This event triggers when any Cell in the 2-dimensional array is modified.
            </summary>
        </member>
        <member name="P:CptS321.Spreadsheet.RowCount">
            <summary>
            Gets the height of the spreadsheet.
            </summary>
        </member>
        <member name="P:CptS321.Spreadsheet.ColumnCount">
            <summary>
            Gets the width of the spreadsheet.
            </summary>
        </member>
        <member name="M:CptS321.Spreadsheet.GetCell(System.Int32,System.Int32)">
            <summary>
            Accesses a cell.
            </summary>
            <param name="rowIndex"> The row of the cell one wants to access. </param>
            <param name="columnIndex"> The column of the cell one wants to access. </param>
            <returns> Returns the cell at location (rowIndex, columnIndex) or null if such a cell does not exist. </returns>
        </member>
        <member name="M:CptS321.Spreadsheet.UpdateSpreadsheet(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Triggers CellPropertyChanged and is called whenever a single cell in spreadSheet has its text field changed.
            </summary>
            <param name="sender"> The cell that was changed. </param>
            <param name="e"> The name of the property that was used for the change. </param>
        </member>
        <member name="T:CptS321.Spreadsheet.Cell">
            <summary>
            Acts the same as a SpreadsheetCell, but can be initiated only inside of Spreadsheet.
            </summary>
        </member>
        <member name="M:CptS321.Spreadsheet.Cell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.Spreadsheet.Cell"/> class.
            Provides access to the constructor of SpreadsheetCell.
            </summary>
            <param name="rowIndex"> The current row number of this cell. </param>
            <param name="columnIndex"> The current column number of this cell. </param>
        </member>
        <member name="P:CptS321.Spreadsheet.Cell.Value">
            <summary>
            Gets or Sets the value of a cell.
            </summary>
        </member>
        <member name="T:CptS321.SpreadsheetCell">
            <summary>
            Class that provides the functionality of a single cell in the spreadsheet.
            </summary>
        </member>
        <member name="F:CptS321.SpreadsheetCell.text">
            <summary>
            The string of the cell that can be seen in the GUI.
            </summary>
        </member>
        <member name="F:CptS321.SpreadsheetCell.value">
            <summary>
            The calculated value of the cell in the GUI.
            </summary>
        </member>
        <member name="M:CptS321.SpreadsheetCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.SpreadsheetCell"/> class.
            </summary>
        </member>
        <member name="M:CptS321.SpreadsheetCell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.SpreadsheetCell"/> class.
            Constructor that allows creation of a SpreadsheetCell with a given rowIndex and columnIndex.
            </summary>
            <param name="rowIndex"> Initialize field rowIndex with parameter rowIndex. </param>
            <param name="columnIndex"> Initialize field columnIndex with paremeter columnIndex. </param>
        </member>
        <member name="E:CptS321.SpreadsheetCell.PropertyChanged">
            <summary>
            Triggers when any of the properties are changed, argument sent is the name of the property.
            </summary>
        </member>
        <member name="P:CptS321.SpreadsheetCell.RowIndex">
            <summary>
            Gets the SpreadsheetCell's rowIndex.
            </summary>
        </member>
        <member name="P:CptS321.SpreadsheetCell.ColumnIndex">
            <summary>
            Gets the SpreadsheetCell's columnIndex.
            </summary>
        </member>
        <member name="P:CptS321.SpreadsheetCell.Text">
            <summary>
            Gets or Sets the SpreadsheetCell's text.
            </summary>
        </member>
        <member name="P:CptS321.SpreadsheetCell.Value">
            <summary>
            Gets or sets the SpreadsheetCell's value.
            </summary>
        </member>
        <member name="T:CptS321.SubtractionBinaryOperator">
            <summary>
            Represents a - operator.
            </summary>
        </member>
        <member name="M:CptS321.SubtractionBinaryOperator.Compute(System.Double,System.Double)">
            <summary>
            Represents - operator.
            </summary>
            <param name="arg1"> The first argument. </param>
            <param name="arg2"> The second argument. </param>
            <returns> The difference of arg1 and arg2. </returns>
        </member>
        <member name="T:CptS321.ValueNode">
            <summary>
            Leaf node that represents a constant numerical value.
            </summary>
        </member>
        <member name="M:CptS321.ValueNode.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.ValueNode"/> class.
            </summary>
            <param name="value"> The value that the leaf will store. </param>
        </member>
        <member name="P:CptS321.ValueNode.Value">
            <summary>
            Gets the value of the node.
            </summary>
        </member>
        <member name="M:CptS321.ValueNode.Evaluate">
            <summary>
            The result of this node.
            </summary>
            <returns> The value. </returns>
        </member>
        <member name="T:CptS321.VariableNode">
            <summary>
            Leaf node that represents a variable in an expression.
            </summary>
        </member>
        <member name="M:CptS321.VariableNode.#ctor(CptS321.ExpressionVariable)">
            <summary>
            Initializes a new instance of the <see cref="T:CptS321.VariableNode"/> class.
            </summary>
            <param name="variable"> Reference to the variable that this node will store. </param>
        </member>
        <member name="P:CptS321.VariableNode.Variable">
            <summary>
            Gets the variable of this node.
            </summary>
        </member>
        <member name="M:CptS321.VariableNode.Evaluate">
            <summary>
            The result of this node.
            </summary>
            <returns> The value field of variable. </returns>
        </member>
    </members>
</doc>
